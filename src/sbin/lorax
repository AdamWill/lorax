#! /usr/bin/env python

#
# lorax
#
# Copyright (C) 2009  Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Red Hat Author(s):  Martin Gracik <mgracik@redhat.com>
#

from __future__ import print_function

import sys
import os
import tempfile
from optparse import OptionParser, OptionGroup
import ConfigParser

import yum
import pylorax


def main(args):
    version = "{0} 0.1".format(os.path.basename(args[0]))
    usage = "%prog -p PRODUCT -v VERSION -r RELEASE -s REPOSITORY OUTPUTDIR"

    parser = OptionParser(usage=usage)

    # required arguments for image creation
    required = OptionGroup(parser, "required arguments")
    required.add_option("-p", "--product", help="product name",
            metavar="STRING")
    required.add_option("-v", "--version", help="version identifier",
            metavar="STRING")
    required.add_option("-r", "--release", help="release information",
            metavar="STRING")
    required.add_option("-s", "--source",
            help="source repository (may be listed multibple times)",
            metavar="REPOSITORY", action="append", default=[])

    # optional arguments
    optional = OptionGroup(parser, "optional arguments")
    optional.add_option("-m", "--mirrorlist",
            help="mirrorlist repository (may be listed multiple times)",
            metavar="REPOSITORY", action="append", default=[])
    optional.add_option("-t", "--variant",
            help="variant name", metavar="STRING")
    optional.add_option("-b", "--bugurl",
            help="bug reporting URL for the product", metavar="URL",
            default="your distribution provided bug reporting tool")
    optional.add_option("--isbeta", help="",
            action="store_true", default=False, dest="is_beta")
    optional.add_option("-c", "--config", default="/etc/lorax/lorax.conf",
            help="config file", metavar="STRING")
    optional.add_option("--proxy", default=None,
            help="repo proxy url:port", metavar="STRING")

    # add the option groups to the parser
    parser.add_option_group(required)
    parser.add_option_group(optional)

    # add the show version option
    parser.add_option("-V", help="show program's version number and exit",
            action="store_true", default=False, dest="showver")

    # parse the arguments
    opts, args = parser.parse_args()

    try:
        outputdir = args[0]
    except IndexError:
        parser.error("missing one or more required arguments")

    if opts.showver:
        print(version)
        sys.exit(0)

    # check for the required arguments
    if not opts.product or not opts.version or not opts.release \
            or not opts.source or not outputdir:
        parser.error("missing one or more required arguments")

    # create the temporary directory for lorax
    tempdir = tempfile.mkdtemp(prefix="lorax.", dir=tempfile.gettempdir())

    # create the yumbase object
    installtree = os.path.join(tempdir, "installtree")
    os.mkdir(installtree)
    yumtempdir = os.path.join(tempdir, "yum")
    os.mkdir(yumtempdir)

    yb = get_yum_base_object(installtree, opts.source, opts.mirrorlist,
                             yumtempdir, opts.proxy)

    if yb is None:
        print("error: unable to create the yumbase object", file=sys.stderr)
        shutil.rmtree(tempdir)
        sys.exit(1)

    # run lorax
    lorax = pylorax.Lorax()
    lorax.configure(conf_file=opts.config)
    lorax.run(yb, opts.product, opts.version, opts.release,
              opts.variant, opts.bugurl, opts.is_beta,
              workdir=tempdir, outputdir=outputdir)


def get_yum_base_object(installroot, repositories, mirrorlists=[],
                        tempdir="/tmp", proxy=None):

    def sanitize_repo(repo):
        if repo.startswith("/"):
            return "file://{0}".format(repo)
        elif (repo.startswith("http://") or repo.startswith("ftp://")
              or repo.startswith("file://")):
            return repo
        else:
            return None

    # sanitize the repositories
    repositories = map(sanitize_repo, repositories)
    mirrorlists = map(sanitize_repo, mirrorlists)

    # remove invalid repositories
    repositories = filter(bool, repositories)
    mirrorlists = filter(bool, mirrorlists)

    #cachedir = os.path.join(tempdir, "yum.cache")
    #if not os.path.isdir(cachedir):
    #    os.mkdir(cachedir)

    yumconf = os.path.join(tempdir, "yum.conf")
    c = ConfigParser.ConfigParser()

    # add the main section
    section = "main"
    data = {#"cachedir": cachedir,
            #"keepcache": 0,
            "gpgcheck": 0,
            "plugins": 0,
            "reposdir": "",
            "tsflags": "nodocs"}

    if proxy:
        data["proxy"] = proxy

    c.add_section(section)
    map(lambda (key, value): c.set(section, key, value), data.items())

    # add the main repository - the first repository from list
    section = "lorax-repo"
    data = {"name": "lorax repo",
            "baseurl": repositories[0],
            "enabled": 1}

    c.add_section(section)
    map(lambda (key, value): c.set(section, key, value), data.items())

    # add the extra repositories
    for n, extra in enumerate(repositories[1:], start=1):
        section = "lorax-extra-repo-{0:d}".format(n)
        data = {"name": "lorax extra repo {0:d}".format(n),
                "baseurl": extra,
                "enabled": 1}

        c.add_section(section)
        map(lambda (key, value): c.set(section, key, value), data.items())

    # add the mirrorlists
    for n, mirror in enumerate(mirrorlists, start=1):
        section = "lorax-mirrorlist-{0:d}".format(n)
        data = {"name": "lorax mirrorlist {0:d}".format(n),
                "mirrorlist": mirror,
                "enabled": 1 }

        c.add_section(section)
        map(lambda (key, value): c.set(section, key, value), data.items())

    # write the yum configuration file
    with open(yumconf, "w") as f:
        c.write(f)

    # create the yum base object
    yb = yum.YumBase()

    yb.preconf.fn = yumconf
    yb.preconf.root = installroot
    #yb.repos.setCacheDir(cachedir)

    return yb


if __name__ == "__main__":
    main(sys.argv)
