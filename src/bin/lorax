#! /usr/bin/env python

#
# lorax
#
# Copyright (C) 2009  Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Red Hat Author(s):  Martin Gracik <mgracik@redhat.com>
#

from __future__ import print_function

import sys
import os
import tempfile
from optparse import OptionParser, OptionGroup

import pylorax
import pylorax.config
from pylorax.yumbase import get_yum_base_object


def main(args):
    version = "{0} 0.1".format(os.path.basename(args[0]))
    usage = "%prog -p PRODUCT -v VERSION -r RELEASE -o OUTPUTDIR REPOSITORY"

    parser = OptionParser(usage=usage)

    # required arguments for image creation
    required = OptionGroup(parser, "required arguments")
    required.add_option("-p", "--product", help="product name",
            metavar="STRING")
    required.add_option("-v", "--version", help="version identifier",
            metavar="STRING")
    required.add_option("-r", "--release", help="release information",
            metavar="STRING")
    required.add_option("-o", "--outputdir", help="output directory",
            metavar="PATHSPEC")

    # optional arguments
    optional = OptionGroup(parser, "optional arguments")
    optional.add_option("-m", "--mirrorlist",
            help="mirrorlist repository (may be listed multiple times)",
            metavar="REPOSITORY", action="append", default=[])
    optional.add_option("-t", "--variant",
            help="variant name", metavar="STRING")
    optional.add_option("-b", "--bugurl",
            help="bug reporting URL for the product", metavar="URL",
            default="your distribution provided bug reporting tool")
    optional.add_option("-u", "--updates",
            help="directory containing updates", metavar="PATHSPEC")

    # output settings
    output = OptionGroup(parser, "output settings")
    output.add_option("--no-colors", help="disable color output",
            action="store_false", default=True, dest="colors")
    output.add_option("--encoding", help="set encoding",
            metavar="STRING", default="utf-8")
    output.add_option("-d", "--debug", help="enable debugging messages",
            action="store_true", default=False)

    # lorax settings
    settings = OptionGroup(parser, "lorax settings")
    settings.add_option("-c", "--cleanup", help="clean up on exit",
            action="store_true", default=False)

    # add the option groups to the parser
    parser.add_option_group(required)
    parser.add_option_group(optional)
    parser.add_option_group(output)
    parser.add_option_group(settings)

    # add the show version option
    parser.add_option("-V", help="show program's version number and exit",
            action="store_true", default=False, dest="showver")

    # parse the arguments
    opts, args = parser.parse_args()
    repositories = args

    if opts.showver:
        print(version)
        sys.exit(0)

    # check for the required arguments
    if not opts.product or not opts.version or not opts.release \
            or not opts.outputdir or not repositories:
        parser.error("missing one or more required arguments")

    # create the temporary directory for lorax
    tempdir = tempfile.mkdtemp(prefix="lorax.", dir=tempfile.gettempdir())

    # create the yumbase object
    installtree = os.path.join(tempdir, "installtree")
    os.mkdir(installtree)
    yumtempdir = os.path.join(tempdir, "yum")
    os.mkdir(yumtempdir)

    yb = get_yum_base_object(installtree, repositories, opts.mirrorlist,
                             yumtempdir)

    if yb is None:
        print("error: unable to create the yumbase object", file=sys.stderr)
        shutil.rmtree(tempdir)
        sys.exit(1)

    # configure lorax
    config = pylorax.config.LoraxConfig()
    config.colors = opts.colors
    config.encoding = opts.encoding
    config.debug = opts.debug

    # run lorax
    params = {"installtree": installtree,
              "outputdir": opts.outputdir,
              "product": opts.product,
              "version": opts.version,
              "release": opts.release,
              "workdir": tempdir,
              "variant": opts.variant,
              "bugurl": opts.bugurl,
              "updatesdir": opts.updates}

    lorax = pylorax.Lorax(yb, **params)
    lorax.run()


if __name__ == "__main__":
    main(sys.argv)
