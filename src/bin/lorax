#!/usr/bin/env python

#
# lorax
# lorax executable script
#
# Copyright (C) 2009  Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Red Hat Author(s):  David Cantrell <dcantrell@redhat.com>
#                     Martin Gracik <mgracik@redhat.com>
#

import sys
import os
from optparse import OptionParser, OptionGroup

import pylorax


if __name__ == '__main__':
    version = '%s 0.1' % os.path.basename(sys.argv[0])
    usage = '%prog -p PRODUCT -v VERSION -r RELEASE -o OUTPUTDIR REPOSITORY'

    parser = OptionParser(usage=usage)

    def check_dir(option, opt_str, value, parser):
        if os.path.isdir(value):
            setattr(parser.values, option.dest, value)
        else:
            parser.error('%s is not a directory' % value)


    # required
    # XXX "options" should not be required
    group = OptionGroup(parser, 'Required')
    group.add_option('-p', '--product', help='Product name',
                      metavar='STRING')
    group.add_option('-v', '--version', help='Version identifier',
                      metavar='STRING')
    group.add_option('-r', '--release', help='Release information or comment',
                      metavar='STRING')
    group.add_option('-o', '--output', help='Destination directory',
                      metavar='PATHSPEC')
    parser.add_option_group(group)

    # optional
    # XXX are all of these used?
    group = OptionGroup(parser, 'Optional')
    group.add_option('-d', '--debug', help='Enable debugging messages',
                     action='store_true', default=False)
    group.add_option('-t', '--variant', help='Variant name',
                     metavar='STRING')
    group.add_option('-b', '--bugurl', help='Bug reporting URL for the product',
                     metavar='URL', default='your distribution provided bug reporting tool.')
    group.add_option('-u', '--updates', help='Directory containing updates',
                     metavar='PATHSPEC')
    group.add_option('-m', '--mirrorlist',
                     help='Mirror list repository (may be listed multiple times)',
                     metavar='REPOSITORY', action='append', default=[])
    group.add_option('-c', '--confdir', help='Path to config files (default: /etc/lorax).',
                     metavar='PATHSPEC', action='callback', callback=check_dir,
                     type='string', default='/etc/lorax')
    group.add_option('-C', '--cleanup', help='Cleanup on exit',
                     action='store_true', default=False)
    group.add_option('-V', help='Print version and exit',
                     action='store_true', default=False, dest='printver')
    parser.add_option_group(group)

    # additional information
    group = OptionGroup(parser, 'Additional information',
                        'A "REPOSITORY" specification is a valid yum repository path.\n'
                        'See the man page lorax(8) for more information.')
    parser.add_option_group(group)

    (opts, args) = parser.parse_args()

    if opts.printver:
        print(version)
        sys.exit(0)

    if not opts.product or not opts.version or not opts.release or not opts.output:
        parser.error('Missing required argument')

    if not args:
        parser.error('Missing repository')

    config = pylorax.Config()
    config.set(confdir=opts.confdir,
               debug=opts.debug,
               cleanup=opts.cleanup)

    # required
    config.set(product=opts.product,
               version=opts.version,
               release=opts.release,
               outdir=opts.output,
               repos=args)

    # optional
    config.set(variant=opts.variant,
               bugurl=opts.bugurl,
               updates=opts.updates,
               mirrorlist=opts.mirrorlist)

    lorax = pylorax.Lorax(config=config)
    lorax.run()
